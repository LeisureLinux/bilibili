#!/bin/sh
# Define a netboot Alpine VM to run adhole, the adblocker
# arch in: x86_64, aarch64, s390x, ppc64le, armv7, armhf
#
# Disk style could be in: minimum, zsh, adhole
disk="minimum"
#
# arch="ppc64le"
arch="s390x"
# arch="arm"
#
vm_arch=$arch
# vm_arch="armhf"
nb_url="https://mirror.nju.edu.cn/alpine/latest-stable/releases/$vm_arch/netboot"
modloop="modloop=none"
#
# default values
####################
virt="virt"
machine="virt"
domain_type="qemu"
console="ttyS0"
####################
case $arch in
"x86_64")
	# work
	domain_type="kvm"
	machine='pc-i440fx-jammy'
	;;
"ppc64le")
	# work, console had to be hvc0
	console="hvc0"
	machine="pseries"
	cpu="POWER10"
	;;
"aarch64")
	# work, need chronyd, to have right clock
	console="ttyAMA0"
	cpu="cortex-a76"
	;;
"arm")
	# not working yet
	# not startup due to wrong arch
	console="ttyAMA0"
	cpu="cortex-a15"
	machine="orangepi-pc"
	vm_arch="armhf"
	my_dir="/nfsroot/VMs/alpine/netboot/$vm_arch"
	[ ! -d "$my_dir" ] && mkdir -p $my_dir
	# https://gist.github.com/ambiamber/4e70be9ae0c7ecbbdbd7880b36db59ca
	[ ! -r $my_dir/vmlinuz-rpi2 ] && axel -o $my_dir $nb_url/vmlinuz-rpi2
	[ ! -r $my_dir/initramfs-rpi2 ] && axel -o $my_dir $nb_url/initramfs-rpi2
	apkovl="http://192.168.7.11/apkovl/${disk}.tar.gz"
	QEMU="qemu-system-arm -accel tcg,thread=multi"
	CPU="-cpu cortex-a7 -smp cores=4"
	MACHINE="-machine virt"
	MEMORY=2048
	$QEMU $MACHINE $CPU \
		-m $MEMORY \
		-kernel "$my_dir/vmlinuz-rpi" \
		-append "console=ttyAMA0 ip=dhcp apkovl=$apkovl" \
		-initrd "$my_dir/initramfs-rpi" \
		-bios AAVMF32_CODE.fd \
		-nographic \
		-nic user,model=virtio \
		-device virtio-rng-pci \
		-rtc base=utc,clock=host
	exit
	# -bios /usr/share/AAVMF/AAVMF32_CODE.fd \
	#	qemu-system-arm -M vexpress-a9 -kernel zImage -initrd initramfs-grsec -dtb vexpress-v2p-ca9.dtb -hda hda.img -serial stdio
	;;
"s390x")
	# work, but very slow to startup in openrc
	console="ttysclp0"
	cpu="max"
	machine="s390-ccw-virtio-7.2"
	# modloop="modloop=$nb_url/modloop-lts"
	;;
esac

# domain name you want to use
my_domain="$disk-$arch-01"
# your kernel and initramfs downloaded dir name
my_dir="/nfsroot/VMs/alpine/netboot/$arch"
[ ! -d "$my_dir" ] && mkdir -p $my_dir
# Web 端的 apkovl.tar.gz 的路径
apkovl="http://192.168.7.11/apkovl/${disk}.tar.gz"
# apkovl="https://apkovl:AdH0!e@apkovl.freelamp.com/adhole.apkovl.tar.gz"
cmdline="console=$console ip=dhcp $modloop apkovl=$apkovl"
# netboot image url
#
# use the last autostart network as your network name
my_network="$(virsh -q net-list --autostart --name | tail -1)"
[ -z "$my_network" ] && echo "Error: Please define an autostart network first!" && exit 1
#
virsh domid $my_domain >/dev/null 2>&1
[ $? = 0 ] && echo "Info: $my_domain exist, undefine it first." && virsh undefine $my_domain
# define a 1c/2G VM, 2GB is needed for adhole to process over 1M blocking domains
cat <<EOF >/tmp/$my_domain.xml
<domain type='$domain_type'>
   <name>$my_domain</name>
   <metadata>
     <libosinfo:libosinfo xmlns:libosinfo="http://libosinfo.org/xmlns/libvirt/domain/1.0">
       <libosinfo:os id="http://alpinelinux.org/alpinelinux/3.17"/>
     </libosinfo:libosinfo>
   </metadata>
   <os>
     <type arch='$vm_arch' machine='$machine'>hvm</type>
     <kernel></kernel>
     <initrd></initrd>
     <cmdline></cmdline>
   </os>
   <memory unit='KiB'>2048000</memory>
   <currentMemory unit='KiB'>2048000</currentMemory>
   <vcpu placement='static'>1</vcpu>
</domain>
EOF
virsh -d 4 define /tmp/$my_domain.xml
[ $? != 0 ] && echo "Error: unable to define domain, please check: /tmp/$my_domain.xml" && exit 1
rm /tmp/$my_domain.xml && echo "Info: removed: /tmp/$my_domain.xml"
#
virt-xml $my_domain --edit --metadata description="This VM is auto-generated by $0, a script coined by LeisureLinux."
#
# Old way: virt-xml $my_domain --edit --xml ./os/kernel="$my_dir/vmlinuz-lts"
virt-xml $my_domain --edit --boot kernel="$my_dir/vmlinuz-lts"
[ $? != 0 ] && echo "Error: found error in kernel define" && virsh undefine $my_domain && exit 1
virt-xml $my_domain --edit --boot initrd="$my_dir/initramfs-lts"
[ $? != 0 ] && echo "Error: found error in initrd define" && virsh undefine $my_domain && exit 2
virt-xml $my_domain --edit --boot cmdline="$cmdline"
[ $? != 0 ] && echo "Error: found error in cmdline define" && virsh undefine $my_domain && exit 3
[ $arch = "arm" ] && virt-xml $my_domain --edit --boot loader="/usr/share/AAVMF/AAVMF32_CODE.fd"
[ $arch = "aarch64" ] && virt-xml $my_domain --edit --boot loader="/usr/share/AAVMF/AAVMF_CODE.fd"
# --options "readonly=yes,type=pflash"
if [ "$arch" != "x86_64" ]; then
	virt-xml $my_domain --edit --cpu model="$cpu"
else
	virt-xml $my_domain --edit --cpu mode='host-passthrough'
fi

# <loader readonly='yes' type='pflash'>/usr/share/AAVMF/AAVMF_CODE.fd</loader>
# <nvram>/var/lib/libvirt/qemu/nvram/softpi-3b-01_VARS.fd</nvram>
# clock
# virt-xml $my_domain --edit --clock rtc_tickpolicy=catchup
# virt-xml $my_domain --edit --clock pit_tickpolicy=delay
#
virt-xml $my_domain --add-device --network $my_network
[ $? != 0 ] && echo "Error: found error in network device add" && virsh undefine $my_domain && exit 4
virt-xml $my_domain --add-device --serial pty,target_type=isa-serial
virt-xml $my_domain --add-device --console pty,target_type=virtio
[ $? != 0 ] && echo "Error: found error in adding serial device" && virsh undefine $my_domain && exit 5
echo
echo "Domain $my_domain defined!"

# 下载最新版本的支持 netboot 的内核和initrd:
[ ! -r $my_dir/vmlinuz-lts ] && axel -o $my_dir $nb_url/vmlinuz-lts
[ ! -r $my_dir/initramfs-lts ] && axel -o $my_dir $nb_url/initramfs-lts
